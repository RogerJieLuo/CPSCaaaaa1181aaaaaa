package week2.assign2;

/**
 * This Instrument class consists of type, brand name, model, item id, mrsp, markup and discount.
 * User can create an object instrument with type, brand, model and mrsp, Or with empty constructor, system will create a
 * "!none" type and set mrsp to 0 as default.
 * The item id will be generated by system. It would combine the first character of the type and number start from 100.
 * Every item id generated, it will increase by 1.
 *
 * Note:
 *      Once the instrument object created, the type, brand name, model, mrsp and item id are not able to be changed.
 *
 * Used formula:
 *      discount calculation: if discount input is 20, means 20%.
 *          price = mrsp * ( 1 - discount1 % ) * ( 1 - discount2 % ) * ( 1 - discount3 % ) ...
 *      markup calculation: if markup input is 20, means 20%.
 *          price = mrsp * ( 1 + markup1 % ) * ( 1 + markup2 % ) * ( 1 + markup3 % ) ...
 *
 *
 * @author Jie Luo
 * @version Jan 13, 2018
 *
 */

public class Instrument {

    private String type;
    private String brandName;
    private String modelNumber;
    private String itemId;
    private double mrsp;
    private double markup = 0;
    private double discount = 0;
    private static int itemNumber = 100;

    /**
     * Default empty constructor
     * The instrument type will be set to "!none" and mrsp to 0 as default.
     */
    public Instrument()
    {
        this.type = "!none";
        this.mrsp = 0;
        this.itemId = genItemId();
    }

    /**
     * Class constructor specifying the type, brandName, model and mrsp.
     * All the string like type, brandName and model will be normalized to eliminate useless white space, details in
     * normalize method.
     * The type is not supposed to be empty or null, system will generate type "!none" for empty type, the item id with
     * empty type will start with "!" mark, like "!100"
     * The brandName or model could be null or empty string, it's not mandatory, system will make them empty if they are
     * null
     * The mrsp can not be less than 0, if users construct with negative mrsp, system will make it be 0
     * The item id is uniquely generated by system in order to keep track each instrument.
     */
    public Instrument(String type, String brandName, String modelNumber, double mrsp) {
        type = normalizeType(type);
        if(type.length() == 0)
        {
            this.type = "!none";
        }
        else
        {
            this.type = normalizeType(type);
        }
        this.brandName = normalize(brandName);
        this.modelNumber = normalize(modelNumber);
        if(mrsp > 0)
        {
            this.mrsp = mrsp;
        }
        else
        {
            this.mrsp = 0.0;
        }
        this.itemId = genItemId();
    }

    /**
     * This method is used to set up the markup value for the instrument.
     * If the markup stored is not 0, then it will be compounded with the percent parameter.
     * The percent is not supposed to be less than 0, warning would show up without updating markup.
     * @param percent the percentage of markup
     */
    public void addMarkupPercentage(double percent)
    {
        setMarkup(percent);
    }

    /**
     * This method is used to set up the discount value for the instrument.
     * If the discount stored is not 0, then it will be compounded with the percent parameter.
     * The percent is not supposed to be less than 0, warning would show up without updating discount.
     * @param percent the percentage of discount
     */
    public void addDiscountPercentage(double percent)
    {
        setDiscount(percent);
    }

    /**
     * This method returns the instrument's final price after calculate with markup and discount compounded.
     * @return the price after markup and discount.
     */
    public double calculatePrice()
    {
        // if mrsp is 0, there is no need to calculate, return 0
        if( this.mrsp == 0 )
        {
            return 0;
        }

        double price = mrsp;
        if(markup > 0)
        {
            price *=  1 + markup / 100.0 ;
        }
        if(discount > 0)
        {
            price *= 1 - discount / 100.0;
        }
        return price;
    }

    /**
     * This method is to generate the instrument item based on the first character of the type and the itemNumber.
     * Every time after item id generated, the item number will be increased by 1, so it can maker sure the item id
     * for each instrument is unique. So the format would be "p100" for first piano, "p101" for second piano.
     * @return the itemId
     */
    private String genItemId()
    {
        String id =  "" + this.type.charAt(0) + itemNumber;
        itemNumber ++;
        return id;
    }

    private String normalizeType(String type)
    {
        return normalize(type).toLowerCase();
    }

    /**
     * return instrument's type
     * @return type
     */
    public String getType()
    {
        return type;
    }

    /**
     * This method will combine the brand name and model together with a dash
     * If there is no model, then return only brand name
     * If the brand name is null, return empty string
     * @return string combine with brand name and model
     */
    public String getBrandNModel()
    {
        if(this.brandName.length() == 0)
        {
            return "";
        }
        if(this.modelNumber.length() != 0)
        {
            return this.brandName + " - " + this.modelNumber;
        }

        return this.brandName;
    }

    /**
     * return instrument's item id
     * @return itemId
     */
    public String getItemId()
    {
        return itemId;
    }

    /**
     * return instrument's mrsp
     * @return mrsp
     */
    public double getMrsp()
    {
        return this.mrsp;
    }

    /**
     * This method will return the markup percentage added on mrsp.
     * @return markup percentage added on
     */
    public double getMarkup()
    {
        return this.markup;
    }

    /**
     * This method is used to update the markup value with the new value input
     * @param markup new markup inputs
     */
    private void setMarkup(double markup)
    {
        // warning when markup is less than 0 and stop the value be processed.
        if(markup < 0)
        {
            System.out.println(">>>Warning: the markup can not be less than 0!");
            return;
        }

        if(this.markup == 0)
        {
            this.markup = markup;
        }
        else
        {
            this.markup = 100.0 * ( ( 1 + this.markup / 100.0 ) * ( 1 + markup / 100.0) - 1 );
        }
    }

    /**
     * This method will return the amount percentage off from the mrsp.
     * @return percentage off from the mrsp
     */
    public double getDiscount()
    {
        return this.discount;
    }

    /**
     * This method is used to update the discount value with the new value input
     * @param discount new discount inputs
     */
    private void setDiscount(double discount)
    {
        // warning when discount is less than 0 and stop the value be processed.
        if(discount < 0)
        {
            System.out.println(">>>Warning: the discount can not be less than 0!");
            return;
        }

        if(this.discount == 0)
        {
            this.discount = discount;
        }
        else
        {
            this.discount = 100.0 * ( 1 - ( 1 - this.discount / 100.0 ) * ( 1 - discount / 100.0 ) );
        }
    }

    /**
     * This static method is used to return a string after normalization. It would remove the leading blanks and
     * trailing blanks. This method also remove the continuous duplicated white space between words.
     * @param str the string needed to be normalized.
     * @return a normalized string
     */
    private static String normalize(String str)
    {
        if(str == null)
        {
            return "";
        }
        str = str.trim();
        if(str.length() == 0)
        {
            return "";
        }

        StringBuilder sb = new StringBuilder();
        sb.append(str.charAt(0));
        for(int i = 1; i < str.length(); i++)
        {
            char c = str.charAt(i);
            // only store one white space if there are more than one in a row
            if(c == ' ' )
            {
                if(str.charAt(i-1) != ' ')
                {
                    sb.append(c);
                }
            }
            else
            {
                sb.append(c);
            }
        }
        return sb.toString();
    }

}
